<item>
    <id>0</id>
    <general>
        <name>Gold</name>
        <iconIndex>000</iconIndex>
        <description>Recovers HP by 500 points.</description>
        <itypeId>1</itypeId> <!-- 1 - Regular Item || 2 - Key Item || 3 - Hidden Item -->
        <price>100</price>
        <consumable>true</consumable>
        <scope>7</scope> <!-- 0 - None || 1 - 1 enemy || 2 - All enemies || 3~5 - 1~3 Random enemies || 6 - The User || 7 - 1 Ally || 8 - All allies || 9 - 1 Ally (Dead) || 10 - All allies (Dead) -->
        <occasion>0</occasion> <!-- 0 - Never || 1 - Battle Screen || 2 - Menu Screen || 3 - Always -->
    </general>
    <invocation>
        <speed>0</speed> <!-- Speed modifier (think of quick attack in pokémon) -->
        <successRate>100</successRate> <!-- Amount is in % -->
        <repeats>1</repeats> <!-- How many times it does the effect -->
        <hitType>0</hitType> <!-- 0 - True Damage || 1 - Physical Damage || 2 - Magical Damage -->
        <animationId>41</animationId>
    </invocation>
    <damage> <!-- Enums are still a TODO-->
        <type>0</type> <!-- 0 - Doesn't deal damage -->
        <elementId>0</elementId>
        <formula>0</formula>
        <variance>20</variance>
        <critical>false</critical>
    </damage>
    <effects>
        <code>11</code> <!-- Map<int, std::func(void *)> -> Key to the function that it will call. See Button UI for more info -->
        <dataId>0</dataId> <!-- e.g.: Removes a debuff. Which one? The one in this value (e.g.: 1 - poison || 2 - blind...). See the corresponding database.-->
        <value1>0</value1> <!-- Argument 1, if floating point it's a % from 0 to 1 (e.g.: 0.5 == 50%, 1.5 == 150%) -->
        <value2>500</value2> <!-- Argument 2, if floating point it's a % from 0 to 1 (e.g.: 0.5 == 50%, 1.5 == 150%)  -->
    </effects>
    <note></note> <!-- Additional comments, mainly for development purposes -->
</item>
<item>
    <id>1</id>
    <general>
        <name>HP Potion</name>
        <iconIndex>001</iconIndex>
        <description>Recovers HP by 500 points.</description>
        <itypeId>1</itypeId> <!-- 1 - Regular Item || 2 - Key Item || 3 - Hidden Item -->
        <price>100</price>
        <consumable>true</consumable>
        <scope>7</scope> <!-- 0 - None || 1 - 1 enemy || 2 - All enemies || 3~6 - 1~4 Random enemies || 7 - 1 Ally || 8 - All allies || 9 - 1 Ally (Dead) || 10 - All allies (Dead) || 11 - The User -->
        <ocasion>3</ocasion> <!-- 0 - Always || 1 - Battle Screen || 2 - Menu Screen || 3 - Never -->
    </general>
    <invocation>
        <speed>0</speed> <!-- Speed modifier (think of quick attack in pokémon) -->
        <successRate>100</successRate> <!-- Amount is in % -->
        <repeats>1</repeats> <!-- How many times it does the effect -->
        <hitType>0</hitType> <!-- 0 - True Damage || 1 - Physical Damage || 2 - Magical Damage -->
        <animationId>41</animationId>
    </invocation>
    <damage> <!-- Enums are still a TODO-->
        <type>0</type> <!-- 0 - Doesn't deal damage -->
        <elementId>0</elementId>
        <formula>0</formula>
        <variance>20</variance>
        <critical>false</critical>
    </damage>
    <effects>
        <code>11</code> <!-- Map<int, std::func(void *)> -> Key to the function that it will call. See Button UI for more info -->
        <dataId>0</dataId> <!-- e.g.: Removes a debuff. Which one? The one in this value (e.g.: 1 - poison || 2 - blind...). See the corresponding database.-->
        <value1>0</value1> <!-- Argument 1, if floating point it's a % from 0 to 1 (e.g.: 0.5 == 50%, 1.5 == 150%) -->
        <value2>500</value2> <!-- Argument 2, if floating point it's a % from 0 to 1 (e.g.: 0.5 == 50%, 1.5 == 150%)  -->
    </effects>
    <note></note> <!-- Additional comments, mainly for development purposes -->
</item>
<item>
  <id>2</id>
  <general>
    <name>Super HP Potion</name>
    <iconIndex>001</iconIndex>
    <description>Recovers HP by 1500 points.</description>
    <itypeId>1</itypeId>
    <!-- 1 - Regular Item || 2 - Key Item || 3 - Hidden Item -->
    <price>500</price>
    <consumable>true</consumable>
    <scope>7</scope>
    <!-- 0 - None || 1 - 1 enemy || 2 - All enemies || 3~6 - 1~4 Random enemies || 7 - 1 Ally || 8 - All allies || 9 - 1 Ally (Dead) || 10 - All allies (Dead) || 11 - The User -->
    <ocasion>3</ocasion>
    <!-- 0 - Always || 1 - Battle Screen || 2 - Menu Screen || 3 - Never -->
  </general>
  <invocation>
    <speed>0</speed>
    <!-- Speed modifier (think of quick attack in pokémon) -->
    <successRate>100</successRate>
    <!-- Amount is in % -->
    <repeats>1</repeats>
    <!-- How many times it does the effect -->
    <hitType>0</hitType>
    <!-- 0 - True Damage || 1 - Physical Damage || 2 - Magical Damage -->
    <animationId>41</animationId>
  </invocation>
  <damage>
    <!-- Enums are still a TODO-->
    <type>0</type>
    <!-- 0 - Doesn't deal damage -->
    <elementId>0</elementId>
    <formula>0</formula>
    <variance>20</variance>
    <critical>false</critical>
  </damage>
  <effects>
    <code>11</code>
    <!-- Map<int, std::func(void *)> -> Key to the function that it will call. See Button UI for more info -->
    <dataId>0</dataId>
    <!-- e.g.: Removes a debuff. Which one? The one in this value (e.g.: 1 - poison || 2 - blind...). See the corresponding database.-->
    <value1>0</value1>
    <!-- Argument 1, if floating point it's a % from 0 to 1 (e.g.: 0.5 == 50%, 1.5 == 150%) -->
    <value2>1500</value2>
    <!-- Argument 2, if floating point it's a % from 0 to 1 (e.g.: 0.5 == 50%, 1.5 == 150%)  -->
  </effects>
  <note></note>
  <!-- Additional comments, mainly for development purposes -->
</item>
<item>
  <id>3</id>
  <general>
    <name>Omni HP Potion</name>
    <iconIndex>001</iconIndex>
    <description>Recovers HP by 500 points to the party.</description>
    <itypeId>1</itypeId>
    <!-- 1 - Regular Item || 2 - Key Item || 3 - Hidden Item -->
    <price>600</price>
    <consumable>true</consumable>
    <scope>8</scope>
    <!-- 0 - None || 1 - 1 enemy || 2 - All enemies || 3~6 - 1~4 Random enemies || 7 - 1 Ally || 8 - All allies || 9 - 1 Ally (Dead) || 10 - All allies (Dead) || 11 - The User -->
    <ocasion>1</ocasion>
    <!-- 0 - Always || 1 - Battle Screen || 2 - Menu Screen || 3 - Never -->
  </general>
  <invocation>
    <speed>0</speed>
    <!-- Speed modifier (think of quick attack in pokémon) -->
    <successRate>100</successRate>
    <!-- Amount is in % -->
    <repeats>1</repeats>
    <!-- How many times it does the effect -->
    <hitType>0</hitType>
    <!-- 0 - True Damage || 1 - Physical Damage || 2 - Magical Damage -->
    <animationId>41</animationId>
  </invocation>
  <damage>
    <!-- Enums are still a TODO-->
    <type>0</type>
    <!-- 0 - Doesn't deal damage -->
    <elementId>1</elementId>
    <formula>40</formula>
    <variance>0</variance>
    <critical>false</critical>
  </damage>
  <effects>
    <code>14</code>
    <!-- Map<int, std::func(void *)> -> Key to the function that it will call. See Button UI for more info -->
    <dataId>0</dataId>
    <!-- e.g.: Removes a debuff. Which one? The one in this value (e.g.: 1 - poison || 2 - blind...). See the corresponding database.-->
    <value1>0</value1>
    <!-- Argument 1, if floating point it's a % from 0 to 1 (e.g.: 0.5 == 50%, 1.5 == 150%) -->
    <value2>500</value2>
    <!-- Argument 2, if floating point it's a % from 0 to 1 (e.g.: 0.5 == 50%, 1.5 == 150%)  -->
  </effects>
  <note></note>
  <!-- Additional comments, mainly for development purposes -->
</item>
<item>
    <id>4</id>
    <general>
        <name>MP Potion</name>
        <iconIndex>002</iconIndex>
        <description>Recovers MP by 10 points.</description>
        <itypeId>1</itypeId> <!-- 1 - Regular Item || 2 - Key Item || 3 - Hidden Item -->
        <price>100</price>
        <consumable>true</consumable>
        <scope>7</scope> <!-- 0 - None || 1 - 1 enemy || 2 - All enemies || 3~6 - 1~4 Random enemies || 7 - 1 Ally || 8 - All allies || 9 - 1 Ally (Dead) || 10 - All allies (Dead) || 11 - The User -->
        <ocasion>0</ocasion> <!-- 0 - Always || 1 - Battle Screen || 2 - Menu Screen || 3 - Never -->
    </general>
    <invocation>
        <speed>0</speed> <!-- Speed modifier (think of quick attack in pokémon) -->
        <successRate>100</successRate> <!-- Amount is in % -->
        <repeats>1</repeats> <!-- How many times it does the effect -->
        <hitType>0</hitType> <!-- 0 - True Damage || 1 - Physical Damage || 2 - Magical Damage -->
        <animationId>41</animationId>
    </invocation>
    <damage> <!-- Enums are still a TODO-->
        <type>0</type> <!-- 0 - Doesn't deal damage -->
        <elementId>0</elementId>
        <formula>0</formula>
        <variance>20</variance>
        <critical>false</critical>
    </damage>
    <effects>
        <code>12</code> <!-- Map<int, std::func(void *)> -> Key to the function that it will call. See Button UI for more info -->
        <dataId>0</dataId> <!-- e.g.: Removes a debuff. Which one? The one in this value (e.g.: 1 - poison || 2 - blind...). See the corresponding database.-->
        <value1>0</value1> <!-- Argument 1, if floating point it's a % from 0 to 1 (e.g.: 0.5 == 50%, 1.5 == 150%) -->
        <value2>10</value2> <!-- Argument 2, if floating point it's a % from 0 to 1 (e.g.: 0.5 == 50%, 1.5 == 150%)  -->
    </effects>
    <note></note> <!-- Additional comments, mainly for development purposes -->
</item>
<item>
    <id>5</id>
    <general>
        <name>Bottled Fairy</name>
        <iconIndex>003</iconIndex>
        <description>Revives a fainted hero.</description>
        <itypeId>1</itypeId> <!-- 1 - Regular Item || 2 - Key Item || 3 - Hidden Item -->
        <price>100</price>
        <consumable>true</consumable>
        <scope>7</scope> <!-- 0 - None || 1 - 1 enemy || 2 - All enemies || 3~6 - 1~4 Random enemies || 7 - 1 Ally || 8 - All allies || 9 - 1 Ally (Dead) || 10 - All allies (Dead) || 11 - The User -->
        <ocasion>0</ocasion> <!-- 0 - Always || 1 - Battle Screen || 2 - Menu Screen || 3 - Never -->
    </general>
    <invocation>
        <speed>0</speed> <!-- Speed modifier (think of quick attack in pokémon) -->
        <successRate>100</successRate> <!-- Amount is in % -->
        <repeats>1</repeats> <!-- How many times it does the effect -->
        <hitType>0</hitType> <!-- 0 - True Damage || 1 - Physical Damage || 2 - Magical Damage -->
        <animationId>41</animationId>
    </invocation>
    <damage> <!-- Enums are still a TODO-->
        <type>0</type> <!-- 0 - Doesn't deal damage -->
        <elementId>0</elementId>
        <formula>0</formula>
        <variance>20</variance>
        <critical>false</critical>
    </damage>
    <effects>
        <code>13</code> <!-- Map<int, std::func(void *)> -> Key to the function that it will call. See Button UI for more info -->
        <dataId>0</dataId> <!-- e.g.: Removes a debuff. Which one? The one in this value (e.g.: 1 - poison || 2 - blind...). See the corresponding database.-->
        <value1>0.5</value1> <!-- Argument 1, if floating point it's a % from 0 to 1 (e.g.: 0.5 == 50%, 1.5 == 150%) -->
        <value2>0</value2> <!-- Argument 2, if floating point it's a % from 0 to 1 (e.g.: 0.5 == 50%, 1.5 == 150%)  -->
    </effects>
    <note></note> <!-- Additional comments, mainly for development purposes -->
</item>
<item>
    <id>6</id>
    <general>
        <name>Tous Necklace</name>
        <iconIndex>004</iconIndex>
        <description>Deals 40 fixed damage to all enemies.</description>
        <itypeId>1</itypeId> <!-- 1 - Regular Item || 2 - Key Item || 3 - Hidden Item -->
        <price>100</price>
        <consumable>true</consumable>
        <scope>2</scope> <!-- 0 - None || 1 - 1 enemy || 2 - All enemies || 3~6 - 1~4 Random enemies || 7 - 1 Ally || 8 - All allies || 9 - 1 Ally (Dead) || 10 - All allies (Dead) || 11 - The User -->
        <ocasion>0</ocasion> <!-- 0 - Always || 1 - Battle Screen || 2 - Menu Screen || 3 - Never -->
    </general>
    <invocation>
        <speed>0</speed> <!-- Speed modifier (think of quick attack in pokémon) -->
        <successRate>100</successRate> <!-- Amount is in % -->
        <repeats>1</repeats> <!-- How many times it does the effect -->
        <hitType>0</hitType> <!-- 0 - True Damage || 1 - Physical Damage || 2 - Magical Damage -->
        <animationId>41</animationId>
    </invocation>
    <damage> <!-- Enums are still a TODO-->
        <type>0</type> <!-- 0 - Doesn't deal damage -->
        <elementId>1</elementId>
        <formula>40</formula>
        <variance>0</variance>
        <critical>false</critical>
    </damage>
    <effects>
        <code>14</code> <!-- Map<int, std::func(void *)> -> Key to the function that it will call. See Button UI for more info -->
        <dataId>0</dataId> <!-- e.g.: Removes a debuff. Which one? The one in this value (e.g.: 1 - poison || 2 - blind...). See the corresponding database.-->
        <value1>40</value1> <!-- Argument 1, if floating point it's a % from 0 to 1 (e.g.: 0.5 == 50%, 1.5 == 150%) -->
        <value2>0</value2> <!-- Argument 2, if floating point it's a % from 0 to 1 (e.g.: 0.5 == 50%, 1.5 == 150%)  -->
    </effects>
    <note></note> <!-- Additional comments, mainly for development purposes -->
</item>
<item>
  <id>7</id>
  <general>
    <name>Adidas Sports Pants</name>
    <iconIndex>006</iconIndex>
    <description>Deals 40 fixed damage to all enemies.</description>
    <itypeId>1</itypeId>
    <!-- 1 - Regular Item || 2 - Key Item || 3 - Hidden Item -->
    <price>100</price>
    <consumable>true</consumable>
    <scope>2</scope>
    <!-- 0 - None || 1 - 1 enemy || 2 - All enemies || 3~6 - 1~4 Random enemies || 7 - 1 Ally || 8 - All allies || 9 - 1 Ally (Dead) || 10 - All allies (Dead) || 11 - The User -->
    <ocasion>0</ocasion>
    <!-- 0 - Always || 1 - Battle Screen || 2 - Menu Screen || 3 - Never -->
  </general>
  <invocation>
    <speed>0</speed>
    <!-- Speed modifier (think of quick attack in pokémon) -->
    <successRate>100</successRate>
    <!-- Amount is in % -->
    <repeats>1</repeats>
    <!-- How many times it does the effect -->
    <hitType>0</hitType>
    <!-- 0 - True Damage || 1 - Physical Damage || 2 - Magical Damage -->
    <animationId>41</animationId>
  </invocation>
  <damage>
    <!-- Enums are still a TODO-->
    <type>0</type>
    <!-- 0 - Doesn't deal damage -->
    <elementId>1</elementId>
    <formula>40</formula>
    <variance>0</variance>
    <critical>false</critical>
  </damage>
  <effects>
    <code>14</code>
    <!-- Map<int, std::func(void *)> -> Key to the function that it will call. See Button UI for more info -->
    <dataId>0</dataId>
    <!-- e.g.: Removes a debuff. Which one? The one in this value (e.g.: 1 - poison || 2 - blind...). See the corresponding database.-->
    <value1>40</value1>
    <!-- Argument 1, if floating point it's a % from 0 to 1 (e.g.: 0.5 == 50%, 1.5 == 150%) -->
    <value2>0</value2>
    <!-- Argument 2, if floating point it's a % from 0 to 1 (e.g.: 0.5 == 50%, 1.5 == 150%)  -->
  </effects>
  <note></note>
  <!-- Additional comments, mainly for development purposes -->
</item>
<item>
  <id>8</id>
  <general>
    <name>Gucci Shoes</name>
    <iconIndex>006</iconIndex>
    <description>Deals 40 fixed damage to all enemies.</description>
    <itypeId>1</itypeId>
    <!-- 1 - Regular Item || 2 - Key Item || 3 - Hidden Item -->
    <price>100</price>
    <consumable>true</consumable>
    <scope>2</scope>
    <!-- 0 - None || 1 - 1 enemy || 2 - All enemies || 3~6 - 1~4 Random enemies || 7 - 1 Ally || 8 - All allies || 9 - 1 Ally (Dead) || 10 - All allies (Dead) || 11 - The User -->
    <ocasion>0</ocasion>
    <!-- 0 - Always || 1 - Battle Screen || 2 - Menu Screen || 3 - Never -->
  </general>
  <invocation>
    <speed>0</speed>
    <!-- Speed modifier (think of quick attack in pokémon) -->
    <successRate>100</successRate>
    <!-- Amount is in % -->
    <repeats>1</repeats>
    <!-- How many times it does the effect -->
    <hitType>0</hitType>
    <!-- 0 - True Damage || 1 - Physical Damage || 2 - Magical Damage -->
    <animationId>41</animationId>
  </invocation>
  <damage>
    <!-- Enums are still a TODO-->
    <type>0</type>
    <!-- 0 - Doesn't deal damage -->
    <elementId>1</elementId>
    <formula>40</formula>
    <variance>0</variance>
    <critical>false</critical>
  </damage>
  <effects>
    <code>14</code>
    <!-- Map<int, std::func(void *)> -> Key to the function that it will call. See Button UI for more info -->
    <dataId>0</dataId>
    <!-- e.g.: Removes a debuff. Which one? The one in this value (e.g.: 1 - poison || 2 - blind...). See the corresponding database.-->
    <value1>40</value1>
    <!-- Argument 1, if floating point it's a % from 0 to 1 (e.g.: 0.5 == 50%, 1.5 == 150%) -->
    <value2>0</value2>
    <!-- Argument 2, if floating point it's a % from 0 to 1 (e.g.: 0.5 == 50%, 1.5 == 150%)  -->
  </effects>
  <note></note>
  <!-- Additional comments, mainly for development purposes -->
</item>
<item>
  <id>9</id>
  <general>
    <name>Weird cylinder</name>
    <iconIndex>006</iconIndex>
    <description>A suspicious cylinder shaped weapon.</description>
    <itypeId>1</itypeId>
    <!-- 1 - Regular Item || 2 - Key Item || 3 - Hidden Item -->
    <price>100</price>
    <consumable>true</consumable>
    <scope>2</scope>
    <!-- 0 - None || 1 - 1 enemy || 2 - All enemies || 3~6 - 1~4 Random enemies || 7 - 1 Ally || 8 - All allies || 9 - 1 Ally (Dead) || 10 - All allies (Dead) || 11 - The User -->
    <ocasion>0</ocasion>
    <!-- 0 - Always || 1 - Battle Screen || 2 - Menu Screen || 3 - Never -->
  </general>
  <invocation>
    <speed>0</speed>
    <!-- Speed modifier (think of quick attack in pokémon) -->
    <successRate>100</successRate>
    <!-- Amount is in % -->
    <repeats>1</repeats>
    <!-- How many times it does the effect -->
    <hitType>0</hitType>
    <!-- 0 - True Damage || 1 - Physical Damage || 2 - Magical Damage -->
    <animationId>41</animationId>
  </invocation>
  <damage>
    <!-- Enums are still a TODO-->
    <type>0</type>
    <!-- 0 - Doesn't deal damage -->
    <elementId>1</elementId>
    <formula>40</formula>
    <variance>0</variance>
    <critical>false</critical>
  </damage>
  <effects>
    <code>14</code>
    <!-- Map<int, std::func(void *)> -> Key to the function that it will call. See Button UI for more info -->
    <dataId>0</dataId>
    <!-- e.g.: Removes a debuff. Which one? The one in this value (e.g.: 1 - poison || 2 - blind...). See the corresponding database.-->
    <value1>40</value1>
    <!-- Argument 1, if floating point it's a % from 0 to 1 (e.g.: 0.5 == 50%, 1.5 == 150%) -->
    <value2>0</value2>
    <!-- Argument 2, if floating point it's a % from 0 to 1 (e.g.: 0.5 == 50%, 1.5 == 150%)  -->
  </effects>
  <note></note>
  <!-- Additional comments, mainly for development purposes -->
</item>